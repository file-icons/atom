"use strict";function _createForOfIteratorHelperLoose(o){var i=0;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(o=_unsupportedIterableToArray(o)))return function(){return i>=o.length?{done:true}:{done:false,value:o[i++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return i=o[Symbol.iterator](),i.next.bind(i)}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}const{join}=require("path"),{FileSystem}=require("atom-fs"),{rgbToHSL}=require("./utils.js"),{CompositeDisposable,Disposable,Emitter}=require("atom");// TODO: Double-check how much of this file is even needed once Atom 1.23 hits stable
class UI{constructor(){this.reset(),this.lightTheme=false}// TODO: Clean up the whole notion of "colour modes/motifs", etc.
init(){this.projects=[],this.disposables.add(atom.project.onDidChangePaths(to=>this.setProjects(to)),atom.themes.onDidChangeActiveThemes(()=>{setImmediate(()=>this.checkMotif()),this.fixOffset()}),this.onSaveNewFile(args=>{const file=FileSystem.get(args.file);file&&file.addEditor(args.editor)}),this.onOpenFile(editor=>{const path=editor.getPath();let entity=FileSystem.get(path);entity&&"function"==typeof entity.addEditor||(FileSystem.paths.delete(path),entity=FileSystem.get(path)),entity&&entity.addEditor(editor)}))}reset(){this.disposables&&this.disposables.dispose(),this.emitter&&this.emitter.dispose(),this.disposables=new CompositeDisposable,this.emitter=new Emitter}observe(){this.disposables.add(atom.workspace.observeTextEditors(editor=>{this.emitOpenedEditor(editor),editor.getPath()?this.emitter.emit("open-file",editor):(this.emitter.emit("open-blank",editor),this.waitToSave(editor).then(file=>{this.emitter.emit("save-new-file",{file,editor})}))}))}/**
	 * Register a handler function to fire in response to emitted events.
	 *
	 * @param {String} eventName
	 * @param {Function} handler
	 * @return {Disposable}
	 */subscribe(eventName,handler){return this.emitter?this.emitter.on(eventName,handler):new Disposable(()=>{})}/**
	 * Dispatch an event with the designated name and argument list.
	 *
	 * @param {String} eventName
	 * @param {Array} [args=[]]
	 */emit(eventName,args=[]){this.emitter&&this.emitter.emit(eventName,...args)}/* Event subscription */onMotifChanged(fn){return this.subscribe("motif-changed",fn)}onOpenEditor(fn){return this.subscribe("open-editor",fn)}onOpenFile(fn){return this.subscribe("open-file",fn)}onOpenBlank(fn){return this.subscribe("open-blank",fn)}onOpenProject(fn){return this.subscribe("open-project",fn)}onProjectsAvailable(fn){return this.subscribe("projects-available",fn)}onProjectsChanged(fn){return this.subscribe("projects-changed",fn)}onProjectsEmptied(fn){return this.subscribe("projects-emptied",fn)}onSaveNewFile(fn){return this.subscribe("save-new-file",fn)}/* Event emission */emitMotifChanged(...$){this.emit("motif-changed",$)}emitOpenedEditor(...$){this.emit("open-editor",$)}emitOpenedFile(...$){this.emit("open-file",$)}emitOpenedBlank(...$){this.emit("open-blank",$)}emitOpenedProject(...$){this.emit("open-project",$)}emitProjectsAvailable(...$){this.emit("projects-available",$)}emitProjectsChanged(...$){this.emit("projects-changed",$)}emitProjectsEmptied(...$){this.emit("projects-emptied",$)}observeFiles(fn){for(var _step,_iterator=_createForOfIteratorHelperLoose(atom.textEditors.editors);!(_step=_iterator()).done;){const editor=_step.value;editor.getFileName()&&fn(editor)}return this.onOpenFile(fn)}getStyleSheets(){const{document}=global;if(!document||"object"!=typeof document.styleSheets)return[];const sheets=[],{length}=document.styleSheets;for(let i=0;i<length;++i)sheets.push(document.styleSheets[i]);return sheets}getStyleElement(filename){const packagePath=atom.packages.loadedPackages["file-icons"].path,styles=this.getStyleSheets();if(!document||!styles||!packagePath)return null;const stylePath=join(packagePath,"styles",filename);for(var _step2,_iterator2=_createForOfIteratorHelperLoose(styles);!(_step2=_iterator2()).done;){const styleSheet=_step2.value,{ownerNode}=styleSheet;if(ownerNode&&ownerNode.sourcePath===stylePath)return styleSheet}return null}getThemeColour(){const styleSheet=this.getStyleElement("colours.less");if(!styleSheet)return null;for(var _step3,_iterator3=_createForOfIteratorHelperLoose(styleSheet.cssRules);!(_step3=_iterator3()).done;){const rule=_step3.value;if(".theme-colour-check"===rule.selectorText){const match=rule.cssText.match(/rgb\(.+\)/);return match?match[0].match(/[\d.]+(?=[,)])/g).map(Number):null}}return null}checkMotif(){const colour=this.getThemeColour();if(colour){const isLight=.5<=rgbToHSL(colour)[2];isLight!==this.lightTheme&&(this.lightTheme=isLight,this.emitMotifChanged(isLight))}}fixOffset(){const styles=this.getStyleSheets(),numStyles=styles.length;for(let s=0;s<numStyles;++s){const rules=styles[s].cssRules,numRules=rules.length;for(let r=0;r<numRules;++r){const rule=rules[r];if(".list-group .icon::before, .list-tree .icon::before"===rule.selectorText&&rule.style.top){const offset=rule.style.top;return rule.style.top="",this.restoreOffset&&(this.restoreOffset.dispose(),this.disposables.remove(this.restoreOffset)),this.restoreOffset=new Disposable(()=>rule.style.top=offset),void this.disposables.add(this.restoreOffset)}}}}waitToSave(editor){return new Promise(resolve=>{const cd=new CompositeDisposable(new Disposable(()=>this.disposables.remove(cd)),editor.onDidDestroy(()=>cd.dispose()),editor.onDidChangePath(file=>{cd.dispose(),resolve(file)}));this.disposables.add(cd)})}/**
	 * Update the list of currently-open project folders.
	 *
	 * @param {Array} to
	 * @emits paths-changed
	 */setProjects(to=[]){const from=this.projects;from.join("\n")!==to.join("\n")&&(this.projects=to,to.length?this.emitProjectsAvailable():this.emitProjectsEmptied(),this.emitProjectsChanged({from,to}))}}module.exports=new UI;
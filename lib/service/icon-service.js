"use strict";function _createForOfIteratorHelperLoose(o){var i=0;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(o=_unsupportedIterableToArray(o)))return function(){return i>=o.length?{done:true}:{done:false,value:o[i++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return i=o[Symbol.iterator](),i.next.bind(i)}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}const{CompositeDisposable}=require("atom"),{EntityType,FileSystem}=require("atom-fs"),StrategyManager=require("./strategy-manager.js"),IconDelegate=require("./icon-delegate.js"),IconNode=require("./icon-node.js"),Storage=require("../storage.js");class IconService{init(){this.disposables=new CompositeDisposable,this.disposables.add(FileSystem.observe(this.handleResource.bind(this)),// #693: Notify `FileSystem` when files are deleted
atom.project.onDidChangeFiles(events=>{for(var _step,_iterator=_createForOfIteratorHelperLoose(events);!(_step=_iterator()).done;){const{action,path}=_step.value;if("deleted"===action&&FileSystem.paths.has(path)){const resource=FileSystem.get(path);resource&&resource.destroy(),Storage.deletePath(path)}}})),StrategyManager.init(),this.isReady=true}reset(){this.disposables.dispose(),this.disposables.clear(),this.disposables=null,StrategyManager.reset(),this.isReady=false}/**
	 * Handle a newly-registered filesystem resource.
	 *
	 * @param {Resource} resource
	 * @private
	 */handleResource(resource){if(resource.icon)return;const icon=new IconDelegate(resource);// TODO: Add `.inode` property to Resource class
if(resource.icon=icon,this.disposables.add(resource.onDidDestroy(()=>{icon.destroy(),resource.icon=null})),resource.stats&&resource.stats.ino){const inode=resource.stats.ino;Storage.setPathInode(resource.path,inode)}resource.type&EntityType.SYMLINK&&this.disposables.add(resource.onDidChangeRealPath(({to})=>{const target=FileSystem.get(to);icon.master=target.icon}))}addIconToElement(element,path,options={}){const{isDirectory,isSymlink,isTabIcon}=options;let type=isDirectory?EntityType.DIRECTORY:EntityType.FILE;isSymlink&&(type|=EntityType.SYMLINK);const disposable=IconNode.forElement(element,path,type,isTabIcon);return null!==module.exports.disposables&&module.exports.disposables.add(disposable),disposable}suppressFOUC(){return{iconClassForPath(path){const file=FileSystem.get(path);return file&&file.icon?file.icon.getClasses()||null:null}}}}IconService.prototype.isReady=false,module.exports=new IconService;
"use strict";function _createForOfIteratorHelperLoose(o){var i=0;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(o=_unsupportedIterableToArray(o)))return function(){return i>=o.length?{done:true}:{done:false,value:o[i++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return i=o[Symbol.iterator](),i.next.bind(i)}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}const{CompositeDisposable}=require("atom"),Options=require("../options.js");class StrategyManager{init(){this.fileStrategies=[],this.directoryStrategies=[],this.disposables=new CompositeDisposable;const strategies=[require("./strategies/signature-strategy.js"),require("./strategies/hashbang-strategy.js"),require("./strategies/modeline-strategy.js"),require("./strategies/linguist-strategy.js"),require("./strategies/usertype-strategy.js"),require("./strategies/grammar-strategy.js"),require("./strategies/path-strategy.js")];for(var _i=0,_strategies=strategies;_i<_strategies.length;_i++){const strategy=_strategies[_i];this.addStrategy(strategy)}this.fileStrategies=this.fileStrategies.filter(a=>a).reverse(),this.directoryStrategies=this.directoryStrategies.filter(a=>a).reverse()}reset(){const strategies=new Set([...this.fileStrategies,...this.directoryStrategies]);strategies.forEach(strategy=>strategy.disable()),this.disposables.dispose(),this.disposables=null}addStrategy(strategy){const{priority}=strategy;strategy.matchesFiles&&(this.fileStrategies[priority]=strategy),strategy.matchesDirs&&(this.directoryStrategies[priority]=strategy),strategy.noSetting?"signature"===strategy.name?this.disposables.add(Options.observe("hashbangs",enabled=>{enabled||Options.get("modelines")?strategy.enable():strategy.disable()}),Options.observe("modelines",enabled=>{enabled||Options.get("hashbangs")?strategy.enable():strategy.disable()})):// Strategies without settings are always active
strategy.enable():this.disposables.add(Options.observe(strategy.name,enabled=>{enabled?strategy.enable():strategy.disable()}))}query(resource){if(null!=resource){const strategies=resource.isDirectory?this.directoryStrategies:this.fileStrategies;if(strategies)for(var _step,_iterator=_createForOfIteratorHelperLoose(strategies);!(_step=_iterator()).done;){const strategy=_step.value;if(!strategy.enabled)continue;const shouldStop=strategy.check(resource);if(shouldStop)break}}}}module.exports=new StrategyManager;